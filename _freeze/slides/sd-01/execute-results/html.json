{
  "hash": "be0d152154144f986f40c4fcaf6086c3",
  "result": {
    "markdown": "---\ntitle: \"WASH Canada - Module 5\"\nsubtitle: \"Open Science Tools - authoring and publishing workflows for collaborative scientific writing\"\nauthor: \n  - name: Lars SchÃ¶bitz\n    email: lschoebitz@ethz.ch\n    affiliations:\n        - name: Global Health Engineering - ETH Zurich\n          url: https://ghe.ethz.ch/\nformat: \n  revealjs: \n    theme: slides.scss\n    transition: fade\n    auto-stretch: false\n    height: 900\n    width: 1600\n    slide-number: true\n    logo: img/ghe-logo.png\n    footer: \"https://larnsce.github.io/wash-canada/\"\neditor: source\nexecute:\n  freeze: auto\nparams:\n    week: 1\n---\n\n```{=html}\n<script defer data-domain=\"https://larnsce.github.io/wash-canada/\" src=\"https://plausible.io/js/plausible.js\"></script>\n```\n\n\n\n\n# Welcome! ðŸ‘‹ {background-color=\"#0F4C81\"}\n\n## Meet the lecturer\n\n::: columns\n::: {.column width=\"50%\"}\n**Lars SchÃ¶bitz (he/him)**\n\n![](img/lars_schoebitz_profile_photo.jpg){fig-alt=\"Headshot of Lars SchÃ¶bitz\" fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n-   Environmental Engineer\\\n-   Open Science Specialist at ETH Zurich\n-   Independent Instructor for Data Science with R\\\n:::\n:::\n\n# Why Open Science? {background-color=\"#0F4C81\"}\n\n## Reproducibility\n\n-   Diagram\n\n# What is Quarto? {background-color=\"#0F4C81\"}\n\n##  {.centered auto-animate=\"true\"}\n\n::: {style=\"margin-top: 50px; font-size: 2em; color: #75AADB\"}\nQuarto is a new, open-source,<br> scientific and technical<br> publishing system\n:::\n\n::: midi\n**the goal is to make the process of creating**<br> and collaborating dramatically better\n:::\n\n::: {.fragment .fade-up}\n![](img/horst_quarto_schematic.png){fig-align=\"center\" width=\"1100px\" fig-alt=\"A schematic representing the multi-language input (e.g. Python, R, Observable, Julia) and multi-format output (e.g. PDF, html, Word documents, and more) versatility of Quarto.\"}\n:::\n\n## Quarto for literate programming\n\n::: r-stack\n\n![](img/qmd-knitr.jpeg){.fragment width=\"1800\" fig-alt=\"diagram of converting a Qmd document via knitr/pandoc into markdown and then into output formats\"}\n\n![](img/qmd-jupyter.jpeg){.fragment width=\"1800\" fig-alt=\"diagram of converting a Quarto document via Jupyter/pandoc into markdown and then into output formats\"}\n\n:::\n\n## What is a `.qmd`? {.smaller}\n\n> A Quarto document i.e. a `.qmd` is a plain text file\n\n. . .\n\n**Metadata (YAML)**\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n``` yaml\nformat: html\nengine: knitr\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n``` yaml\nformat: html\nengine: jupyter\n```\n\n:::\n\n::::\n\n. . .\n\n**Code**\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n````code\n```{{r}}\nlibrary(dplyr)\n\nmtcars |> \n  dplyr::group_by(cyl) |> \n  dplyr::summarize(mean = mean(mpg))\n```\n````\n\n:::\n\n::: {.column width=\"50%\"}\n\n````code\n```{{python}}\nfrom siuba import _, group_by, summarize\nfrom siuba.data import mtcars\n(mtcars\n  >> group_by(_.cyl)\n  >> summarize(avg_mpg = _.mpg.mean())\n  )\n```\n````\n\n:::\n\n::::\n\n. . .\n\n**Text**\n\n``` markdown\n# Heading 1\nThis is a sentence with some **bold text**, some *italic text* and an \n![image](image.png){fig-alt=\"Alt text for this image\"}.\n```\n\n## Quarto makes moving between formats straightforward\n\n::: columns\n::: {.column width=\"33%\"}\n::: fragment\nDocument\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} lesson-1.qmd\n:::\n\n``` yaml\ntitle: \"Lesson 1\"\nformat: html\n```\n:::\n:::\n\n::: {.column width=\"33%\"}\n::: fragment\nPresentation\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} lesson-1.qmd\n:::\n\n``` yaml\ntitle: \"Lesson 1\"\nformat: revealjs\n```\n:::\n:::\n\n::: {.column width=\"33%\"}\n::: fragment\nWebsite\n\n::: {.code-file .sourceCode .cell-code}\n{{< fa file >}} \\_quarto.yml\n:::\n\n``` yaml\nproject:\n  type: website\n\nwebsite: \n  navbar: \n    left:\n      - lesson-1.qmd\n```\n:::\n:::\n:::\n\n::: notes\n-   It is traightforward in Quarto to move between output formats\n-   As an educator, there are two things that are important to me\n    -   reproducibility, and\n    -   ease of transitiion between output formats\n-   I am using Quarto for everything, and it's finally the tool let's me go from one output type to anoher without the to change anything by the YAML metadata\n\nFor example, here are common things I produce\n\n--\\> a lesson in document form <br> --\\> the same content in presentation form <br> --\\> the same content on a page in a website,\n\nand you can see that all that needed to change going between these formats is a few lines in the yaml.\n\nNo slide breaks to remove, no citation style to change, no headings to re-level. This ease of transition has freed up time to focus my time on content, and that, folks, is the dream!\n:::\n\n## Comfort of your own workspace\n\n::: r-stack\n![](https://quarto.org/docs/tools/images/rstudio-preview.png){.fragment width=\"1700px\" fig-alt=\"A screenshot of a Quarto document rendered inside RStudio\"}\n\n![](https://quarto.org/docs/tools/images/jupyterlab-preview.png){.fragment width=\"1700px\" fig-alt=\"A screenshot of a Quarto document rendered inside JupyterLab\"}\n\n![](https://quarto.org/docs/computations/images/python-vscode.png){.fragment width=\"1700px\" fig-alt=\"A screenshot of a Quarto document rendered inside VSCode\"}\n:::\n\n# RStudio IDE\n\n## \n\n\n\n# Let's say hello to Quarto\n\n## \n\n\n\n\n\n\n## More resources for Quarto!\n\n-   Video: [Reproducible authoring with Quarto](https://youtu.be/6p4vOKS6Xls)\n-   Video: [Openscapes: Hello Quarto with NASA Openscapes, RLadies Santa Barbara, and JJ Allaire](https://youtu.be/azVAl343CIU)\n-   Quarto documentation: [quarto.org](https://quarto.org/)\n-   Quarto gallery: [quarto.org/docs/gallery](https://quarto.org/docs/gallery/)\n-   Quarto tip a day: [rstd.io/quartotip](https://rstd.io/quartotip)\n\n\n# openwashdata\n\n## \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}